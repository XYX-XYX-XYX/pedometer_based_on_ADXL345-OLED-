C51 COMPILER V9.60.7.0   OLED                                                              07/17/2023 16:34:26 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE OLED
OBJECT MODULE PLACED IN .\Objects\oled.obj
COMPILER INVOKED BY: D:\app\keil\C51\BIN\C51.EXE oled.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\ole
                    -d.lst) TABS(2) OBJECT(.\Objects\oled.obj)

line level    source

   1          #include "oled.h"
   2          #include "oledfont.h"    
   3          
   4          //OLED的显存
   5          //存放格式如下.
   6          //[0]0 1 2 3 ... 127  
   7          //[1]0 1 2 3 ... 127  
   8          //[2]0 1 2 3 ... 127  
   9          //[3]0 1 2 3 ... 127  
  10          //[4]0 1 2 3 ... 127  
  11          //[5]0 1 2 3 ... 127  
  12          //[6]0 1 2 3 ... 127  
  13          //[7]0 1 2 3 ... 127        
  14          
  15          
  16          
  17          /**********************************************
  18          //IIC Start
  19          **********************************************/
  20          void IIC_Start()
  21          {
  22   1        OLED_SCLK_Set() ;
  23   1        OLED_SDIN_Set();
  24   1        OLED_SDIN_Clr();
  25   1        OLED_SCLK_Clr();
  26   1      }
  27          
  28          /**********************************************
  29          //IIC Stop
  30          **********************************************/
  31          void IIC_Stop()
  32          {
  33   1        OLED_SCLK_Set() ;
  34   1        OLED_SDIN_Clr();
  35   1        OLED_SDIN_Set();
  36   1      }
  37          
  38          void IIC_Wait_Ack()
  39          {
  40   1        OLED_SCLK_Set() ;
  41   1        OLED_SCLK_Clr();
  42   1      }
  43          /**********************************************
  44          // IIC Write byte
  45          **********************************************/
  46          
  47          void Write_IIC_Byte(unsigned char IIC_Byte)
  48          {
  49   1        unsigned char i;
  50   1        unsigned char m,da;
  51   1        da=IIC_Byte;
  52   1        OLED_SCLK_Clr();
  53   1        for(i=0;i<8;i++)    
  54   1        {
C51 COMPILER V9.60.7.0   OLED                                                              07/17/2023 16:34:26 PAGE 2   

  55   2            m=da;
  56   2          //  OLED_SCLK_Clr();
  57   2          m=m&0x80;
  58   2          if(m==0x80)
  59   2          {OLED_SDIN_Set();}
  60   2          else OLED_SDIN_Clr();
  61   2            da=da<<1;
  62   2          OLED_SCLK_Set();
  63   2          OLED_SCLK_Clr();
  64   2          }
  65   1      }
  66          
  67          /**********************************************
  68          // IIC Write Command
  69          **********************************************/
  70          void Write_IIC_Command(unsigned char IIC_Command)
  71          {
  72   1         IIC_Start();
  73   1         Write_IIC_Byte(0x78);            //Slave address,SA0=0
  74   1        IIC_Wait_Ack(); 
  75   1         Write_IIC_Byte(0x00);      //write command
  76   1        IIC_Wait_Ack(); 
  77   1         Write_IIC_Byte(IIC_Command); 
  78   1        IIC_Wait_Ack(); 
  79   1         IIC_Stop();
  80   1      }
  81          /**********************************************
  82          // IIC Write Data
  83          **********************************************/
  84          void Write_IIC_Data(unsigned char IIC_Data)
  85          {
  86   1         IIC_Start();
  87   1         Write_IIC_Byte(0x78);      //D/C#=0; R/W#=0
  88   1         IIC_Wait_Ack();  
  89   1         Write_IIC_Byte(0x40);      //write data
  90   1         IIC_Wait_Ack();  
  91   1         Write_IIC_Byte(IIC_Data);
  92   1         IIC_Wait_Ack();  
  93   1         IIC_Stop();
  94   1      }
  95          void OLED_WR_Byte(unsigned dat,unsigned cmd)
  96          {
  97   1        if(cmd)
  98   1        {
  99   2          Write_IIC_Data(dat);
 100   2        }
 101   1        else 
 102   1        { 
 103   2          Write_IIC_Command(dat);
 104   2        }
 105   1      }
 106          
 107          /********************************************
 108          ********************************************/
 109          void fill_picture(unsigned char fill_Data)
 110          {
 111   1        unsigned char m,n;
 112   1        for(m=0;m<8;m++)
 113   1        {
 114   2          OLED_WR_Byte(0xb0+m,0);   //page0-page1
 115   2          OLED_WR_Byte(0x00,0);   //low column start address
 116   2          OLED_WR_Byte(0x10,0);   //high column start address
C51 COMPILER V9.60.7.0   OLED                                                              07/17/2023 16:34:26 PAGE 3   

 117   2          for(n=0;n<128;n++)
 118   2            {
 119   3              OLED_WR_Byte(fill_Data,1);
 120   3            }
 121   2        }
 122   1      }
 123          
 124          
 125          //坐标设置
 126          void OLED_Set_Pos(unsigned char x, unsigned char y) 
 127          {   OLED_WR_Byte(0xb0+y,OLED_CMD);
 128   1        OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
 129   1        OLED_WR_Byte((x&0x0f),OLED_CMD); 
 130   1      } 
 131          
 132          //开启OLED显示    
 133          void OLED_Display_On(void)
 134          {
 135   1        OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC命令
 136   1        OLED_WR_Byte(0X14,OLED_CMD);  //DCDC ON
 137   1        OLED_WR_Byte(0XAF,OLED_CMD);  //DISPLAY ON
 138   1      }
 139          
 140          //关闭OLED显示     
 141          void OLED_Display_Off(void)
 142          {
 143   1        OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC命令
 144   1        OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
 145   1        OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
 146   1      }
 147          
 148          //清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!    
 149          void OLED_Clear(void)  
 150          {  
 151   1        u8 i,n;       
 152   1        for(i=0;i<8;i++)  
 153   1        {  
 154   2          OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 155   2          OLED_WR_Byte (0x00,OLED_CMD);      //设置显示位置―列低地址
 156   2          OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置―列高地址   
 157   2          for(n=0;n<128;n++)OLED_WR_Byte(0,OLED_DATA); 
 158   2        } //更新显示
 159   1      }
 160          
 161          void OLED_On(void)  
 162          {  
 163   1        u8 i,n;       
 164   1        for(i=0;i<8;i++)  
 165   1        {  
 166   2          OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 167   2          OLED_WR_Byte (0x00,OLED_CMD);      //设置显示位置―列低地址
 168   2          OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置―列高地址   
 169   2          for(n=0;n<128;n++)OLED_WR_Byte(1,OLED_DATA); 
 170   2        } //更新显示
 171   1      }
 172          
 173          //在指定位置显示一个字符,包括部分字符
 174          //x:0~127
 175          //y:0~63
 176          //mode:0,反白显示;1,正常显示         
 177          //size:选择字体 16/12 
 178          void OLED_ShowChar(u8 x,u8 y,u8 chr,u8 Char_Size)
C51 COMPILER V9.60.7.0   OLED                                                              07/17/2023 16:34:26 PAGE 4   

 179          {       
 180   1        unsigned char c=0,i=0;  
 181   1          c=chr-'a';//得到偏移后的值      
 182   1          if(x>Max_Column-1){x=0;y=y+2;}
 183   1          if(Char_Size ==16)
 184   1            {
 185   2            OLED_Set_Pos(x,y);  
 186   2            for(i=0;i<8;i++)
 187   2            OLED_WR_Byte(F8X16[c*16+i],OLED_DATA);
 188   2            OLED_Set_Pos(x,y+1);
 189   2            for(i=0;i<8;i++)
 190   2            OLED_WR_Byte(F8X16[c*16+i+8],OLED_DATA);
 191   2            }
 192   1            else {  
 193   2              OLED_Set_Pos(x,y);
 194   2              for(i=0;i<6;i++)
 195   2              OLED_WR_Byte(F6x8[c][i],OLED_DATA);
 196   2              
 197   2            }
 198   1      }
 199          
 200          //m^n函数
 201          u32 oled_pow(u8 m,u8 n)
 202          {
 203   1        u32 result=1;  
 204   1        while(n--)result*=m;    
 205   1        return result;
 206   1      }     
 207          
 208          //显示2个数字
 209          //x,y :起点坐标  
 210          //len :数字的位数
 211          //size:字体大小
 212          //mode:模式 0,填充模式;1,叠加模式
 213          //num:数值(0~4294967295);       
 214          void OLED_ShowNum(u8 x,u8 y,u32 num,u8 len,u8 size2)
 215          {           
 216   1        u8 t,temp;
 217   1        u8 enshow=0;               
 218   1        for(t=0;t<len;t++)
 219   1        {
 220   2          temp=(num/oled_pow(10,len-t-1))%10;
 221   2          if(enshow==0&&t<(len-1))
 222   2          {
 223   3            if(temp==0)
 224   3            {
 225   4              OLED_ShowChar(x+(size2/2)*t,y,' ',size2);
 226   4              continue;
 227   4            }else enshow=1; 
 228   3             
 229   3          }
 230   2          OLED_ShowChar(x+(size2/2)*t,y,temp+'0',size2); 
 231   2        }
 232   1      } 
 233          
 234          //显示一个字符号串
 235          void OLED_ShowString(u8 x,u8 y,u8 *chr,u8 Char_Size)
 236          {
 237   1        unsigned char j=0;
 238   1        while (chr[j]!='\0')
 239   1        {   OLED_ShowChar(x,y,chr[j],Char_Size);
 240   2            x+=8;
C51 COMPILER V9.60.7.0   OLED                                                              07/17/2023 16:34:26 PAGE 5   

 241   2          if(x>120){x=0;y+=2;}
 242   2            j++;
 243   2        }
 244   1      }
 245          
 246          //显示汉字
 247          void OLED_ShowCHinese(u8 x,u8 y,u8 no)
 248          {               
 249   1        u8 t,adder=0;
 250   1        OLED_Set_Pos(x,y);  
 251   1          for(t=0;t<16;t++)
 252   1          {
 253   2              OLED_WR_Byte(Hzk[2*no][t],OLED_DATA);
 254   2              adder+=1;
 255   2           }  
 256   1          OLED_Set_Pos(x,y+1);  
 257   1          for(t=0;t<16;t++)
 258   1            { 
 259   2              OLED_WR_Byte(Hzk[2*no+1][t],OLED_DATA);
 260   2              adder+=1;
 261   2            }         
 262   1      }
 263          
 264          
 265          //初始化SSD1306             
 266          void OLED_Init(void)
 267          {   
 268   1       
 269   1        OLED_WR_Byte(0xAE,OLED_CMD);//--display off
 270   1        OLED_WR_Byte(0x00,OLED_CMD);//---set low column address
 271   1        OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 272   1        OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  
 273   1        OLED_WR_Byte(0xB0,OLED_CMD);//--set page address
 274   1        OLED_WR_Byte(0x81,OLED_CMD); // contract control
 275   1        OLED_WR_Byte(0xFF,OLED_CMD);//--128   
 276   1        OLED_WR_Byte(0xA1,OLED_CMD);//set segment remap 
 277   1        OLED_WR_Byte(0xA6,OLED_CMD);//--normal / reverse
 278   1        OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 279   1        OLED_WR_Byte(0x3F,OLED_CMD);//--1/32 duty
 280   1        OLED_WR_Byte(0xC8,OLED_CMD);//Com scan direction
 281   1        OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset
 282   1        OLED_WR_Byte(0x00,OLED_CMD);//
 283   1        
 284   1        OLED_WR_Byte(0xD5,OLED_CMD);//set osc division
 285   1        OLED_WR_Byte(0x80,OLED_CMD);//
 286   1        
 287   1        OLED_WR_Byte(0xD8,OLED_CMD);//set area color mode off
 288   1        OLED_WR_Byte(0x05,OLED_CMD);//
 289   1        
 290   1        OLED_WR_Byte(0xD9,OLED_CMD);//Set Pre-Charge Period
 291   1        OLED_WR_Byte(0xF1,OLED_CMD);//
 292   1        
 293   1        OLED_WR_Byte(0xDA,OLED_CMD);//set com pin configuartion
 294   1        OLED_WR_Byte(0x12,OLED_CMD);//
 295   1        
 296   1        OLED_WR_Byte(0xDB,OLED_CMD);//set Vcomh
 297   1        OLED_WR_Byte(0x30,OLED_CMD);//
 298   1        
 299   1        OLED_WR_Byte(0x8D,OLED_CMD);//set charge pump enable
 300   1        OLED_WR_Byte(0x14,OLED_CMD);//
 301   1        
 302   1        OLED_WR_Byte(0xAF,OLED_CMD);//--turn on oled panel
C51 COMPILER V9.60.7.0   OLED                                                              07/17/2023 16:34:26 PAGE 6   

 303   1      }  
 304          
 305          
 306          
 307          
 308          
 309          
 310          
 311          
 312          
 313          
 314          
 315          
 316          
 317          
 318          
 319          
 320          
 321          
 322          
 323          
 324          
 325          
 326          
 327          
 328          
 329          
 330          
 331          
 332          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1061    ----
   CONSTANT SIZE    =    236    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      30
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
